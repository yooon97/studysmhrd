package 객체지향프로그래밍ObjectOrientedProgrammingOOP;

public class ex01 {

	public static void main(String[] args) {
		
		// 「Class 클래스 : 사물이 가지는 필드(속성)와 메소드(기능)을 묶어둔 하나의 -자료형-
		// 현실의 객체를 표현하기 위한 방법(설계도)」
		
		// 「객체(Object)
		// 인스턴스(instance)라고 불려지기도한다
		// 설계도를 바탕으로 만들어진다」
		
		// 「특징 (캡상추다)
		
		// 「1.-캡-슐화(Encapsulation)관련된 필드(속성)와 메소드(기능)을 하나로 묶고, 실제 구현내용을 외부로부터 감추는 기법(정보은닉), 
		// 만일의 상황(타인이 외부에서 조작)을 대비해서 특정 속성이나 메소드를 사용자가 조작할 수 없도록 숨겨 놓은것」
		
		// 「2.-상-속(inheritance) - 이미 작성된 클래스(상위클래스 == 부모)의 특성을 그대로 이어받아 새로운 클래스(하위클래스 ==자식)를 생성하는기법
		// 기존 코드를 그대로 재상용하거나 재정의 ->재사용+확장」
		
		// 「3.-추-상화(Abstract) - 객체에서 공통된 속성과 행위를 추출하는 기법, 상세한 정보는 무시하고 필요한 정보들만 간추려서 구성」
		
		// 「4.-다-형성(Polymorphism) - 사전적 의미 '다양한 형태로 나타날 수 있는 능력'
		// 같은 기능(메소드)를 호출하더라도 객체에 따라 다르게 동작하는 것
		// 상위클래스의 동작을 하위클래스에서 다시 정의하여 사용하는 것 또한 다형성으로 볼 수 있다.」
		
		// 「다시 정의하여 사용 -- Overriding 오버라이딩
		// 오버로딩 - 중복정의
		// 오버라이딩 - 재정의」
		
		// 「객체지향프로그래밍의 장점
		// 신뢰성 있는 소프트웨어를 쉽게 작성할 수 있다.
		// 코드를 재사용하기 쉽다
		// 유지보수가 용이하다
		// 직관적인 코드 분석이 가능하다
		// 소프트웨어 생산성이 향상된다」
	
		
	
	
	
	}

}
